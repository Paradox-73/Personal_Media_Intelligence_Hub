# Project Roadmap

## Core Enhancements
- **Web Interface:** Transition from a terminal-based application to a dynamic web framework like Streamlit or Flask.
- **CI/CD Pipeline:** Implement a CI/CD pipeline using GitHub Actions to automate testing and ensure code quality.
- **Model Refinement:** Continuously improve feature engineering and model tuning as more data is gathered.

## Gemini Prompts

### 1. Understand the Codebase
- "Read and understand the entire `src` directory, especially `app.py`, `data_loader.py`, `feature_extractor.py`, and `model_trainer.py` to get a comprehensive understanding of the project's current state."
- "Analyze the `requirements.txt` file to identify all project dependencies."
- "Review the directory structure and the purpose of each folder, such as `data`, `models`, and `diagnostics`."

### 2. Web Interface (Flask)
- "Create a new file `src/web_app.py`."
- "Initialize a basic Flask application in `src/web_app.py`."
- "Design and create HTML templates for the user interface in a new `templates` directory."
- "Implement routes in `src/web_app.py` to handle user input, interact with the recommendation models, and display results."
- "Add CSS to the templates for styling, ensuring a clean and user-friendly interface."

### 3. CI/CD Pipeline (GitHub Actions)
- "Create a `.github/workflows` directory."
- "Inside the workflows directory, create a `ci.yml` file."
- "Define a CI pipeline in `ci.yml` that triggers on push and pull requests to the main branch."
- "The pipeline should install dependencies, run tests (we will need to create some), and perform static analysis (e.g., with flake8 or pylint)."

### 4. Model Refinement
- "Analyze the existing feature extraction logic in `feature_extractor.py` and suggest improvements."
- "Examine the model training process in `model_trainer.py` and identify areas for optimization."
- "Implement cross-validation to get a more robust evaluation of the models' performance."