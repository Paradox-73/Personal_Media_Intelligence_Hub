(content_rec) E:\Personal_Media_Intelligence_Hub>python src/model_trainer.py
--- Starting Model Training for Game ---

--- Starting data loading for Game ---
Successfully loaded data\games_data.csv
Initial DataFrame info for Game:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 53 entries, 0 to 52
Data columns (total 15 columns):
 #   Column              Non-Null Count  Dtype  
---  ------              --------------  -----  
 0   name                53 non-null     object
 1   my_rating           53 non-null     float64
 2   platform_from_text  53 non-null     object
 3   released            52 non-null     object
 4   age_rating          42 non-null     object
 5   genres              53 non-null     object
 6   developers          52 non-null     object
 7   publishers          51 non-null     object
 8   metacritic          36 non-null     float64
 9   rating              53 non-null     float64
 10  ratings_count       53 non-null     int64
 11  reviews_count       53 non-null     int64
 12  cover               53 non-null     object
 13  tags                49 non-null     object
 14  description_raw     51 non-null     object
dtypes: float64(3), int64(2), object(10)
memory usage: 6.3+ KB

Initial DataFrame head for Game:
                          name  ...                                    description_raw
0  Need For Speed: Most Wanted  ...  Wake up to the smell of burnt asphalt as the s...
1                God of War II  ...  The second installment in the God of War franc...
2                 God of War I  ...  Unleash the power of the Gods and embark on a ...
3   WWE Smackdown vs. RAW 2009  ...  In WWE, the only person you can rely on, other...
4                      FIFA 09  ...  Step onto the pitch and play professional foot...

[5 rows x 15 columns]
Columns renamed: {'name': 'title', 'description_raw': 'description', 'genres': 'genres', 'cover': 'image_url', 'my_rating': 'my_rating', 'released': 'release_date'}
Converted 'release_date' to datetime and extracted 'release_year'.
Imputed missing values in 'metacritic' (from original 'metacritic') with median: 82.0
Filled missing values in 'developers' (from original 'developers') with 'Unknown'.
Filled missing values in 'publishers' (from original 'publishers') with 'Unknown'.
Filled missing values in 'tags' (from original 'tags') with 'Unknown'.
Filled missing values in 'title' (from original 'name') with 'Unknown'.
Filled missing values in 'age_rating' (from original 'age_rating') with 'Unknown'.
Filled missing values in 'description' (from original 'description_raw') with 'Unknown'.        
Filled missing values in 'platform_from_text' (from original 'platform_from_text') with 'Unknown'.
Created 'like_dislike' target based on 'my_rating' >= 4.0.

DataFrame info after cleaning for Game:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 53 entries, 0 to 52
Data columns (total 17 columns):
 #   Column              Non-Null Count  Dtype
---  ------              --------------  -----
 0   title               53 non-null     object
 1   my_rating           53 non-null     float64
 2   platform_from_text  53 non-null     object
 3   release_date        52 non-null     datetime64[ns]
 4   age_rating          53 non-null     object
 5   genres              53 non-null     object
 6   developers          53 non-null     object
 7   publishers          53 non-null     object
 8   metacritic          53 non-null     float64
 9   rating              53 non-null     float64
 10  ratings_count       53 non-null     int64
 11  reviews_count       53 non-null     int64
 12  image_url           53 non-null     object
 13  tags                53 non-null     object
 14  description         53 non-null     object
 15  release_year        52 non-null     float64
 16  like_dislike        53 non-null     int64
dtypes: datetime64[ns](1), float64(4), int64(3), object(9)
memory usage: 7.2+ KB

DataFrame head after cleaning for Game:
                         title  my_rating  ... release_year like_dislike
0  Need For Speed: Most Wanted        5.0  ...       2005.0            1
1                God of War II        5.0  ...       2007.0            1
2                 God of War I        5.0  ...       2005.0            1
3   WWE Smackdown vs. RAW 2009        4.0  ...       2008.0            1
4                      FIFA 09        3.0  ...       2008.0            0

[5 rows x 17 columns]

Show rating distribution:
my_rating
5.0    15
3.0    15
4.0    14
2.0     5
4.5     3
1.0     1
Name: count, dtype: int64
Show like/dislike distribution:
like_dislike
1    32
0    21
Name: count, dtype: int64
Data split: Train samples = 42, Test samples = 11
Using device: cuda
--- Fitting FeatureExtractor for Game ---
Numerical features to fit: ['metacritic', 'rating', 'ratings_count', 'reviews_count']
Categorical features to fit: ['platform_from_text', 'age_rating', 'developers', 'publishers']   
Fitting ColumnTransformer...
ColumnTransformer fitted.
Loading text model: sentence-transformers/all-MiniLM-L6-v2
Loading image model: google/vit-base-patch16-224-in21k
Fitting PCA for text features...
Batches: 100%|███████████████████████████████████████████████████| 2/2 [00:01<00:00,  1.98it/s] 
Text PCA fitted with 41 components.
Fitting PCA for image features...
Extracting image features: 100%|███████████████████████████████| 42/42 [00:26<00:00,  1.61it/s] 
Image PCA fitted with 41 components.
FeatureExtractor fitting complete.
Transforming training data...
--- Transforming data using FeatureExtractor ---
ColumnTransformer output shape (on cuda): torch.Size([42, 79])
Batches: 100%|███████████████████████████████████████████████████| 2/2 [00:00<00:00, 21.05it/s] 
Text embeddings shape (on cuda): torch.Size([42, 41])
Extracting image features: 100%|███████████████████████████████| 42/42 [00:25<00:00,  1.65it/s] 
Image embeddings shape (on cuda): torch.Size([42, 41])
Combined features shape (on cuda): torch.Size([42, 161])
Transforming test data...
--- Transforming data using FeatureExtractor ---
ColumnTransformer output shape (on cuda): torch.Size([11, 79])
Batches: 100%|██████████████████████████████████████████████████| 1/1 [00:00<00:00, 163.62it/s] 
Text embeddings shape (on cuda): torch.Size([11, 41])
Extracting image features: 100%|███████████████████████████████| 11/11 [00:06<00:00,  1.83it/s] 
Image embeddings shape (on cuda): torch.Size([11, 41])
Combined features shape (on cuda): torch.Size([11, 161])
Found existing best parameters for Game. Loading them.
Loaded parameters: {'n_estimators': 817, 'learning_rate': 0.19555491810614598, 'max_depth': 5, 'subsample': 0.8781570800085655, 'colsample_bytree': 0.903837449715374}
Training XGBoost Regressor model with best parameters...
XGBoost model training complete.

--- Evaluating Model ---
Mean Absolute Error (MAE): 0.3898
Root Mean Squared Error (RMSE): 0.5097
R-squared (R2): 0.6792

--- Saving trained model and feature extractor to E:\Personal_Media_Intelligence_Hub\src\..\models\game ---

Ensured directory exists: E:\Personal_Media_Intelligence_Hub\src\..\models\game
Ensured directory exists: E:\Personal_Media_Intelligence_Hub\src\..\diagnostics\game
Ensured directory exists: E:\Personal_Media_Intelligence_Hub\src\..\models\game\feature_extractor
Saving FeatureExtractor components to E:\Personal_Media_Intelligence_Hub\src\..\models\game\feature_extractor...
FeatureExtractor components saved.
Saved feature importance plot to E:\Personal_Media_Intelligence_Hub\src\..\diagnostics\game\Game_feature_importance.png
Training process complete for Game

Successfully trained model for Game.


================================================================================

--- Starting Model Training for Show ---

--- Starting data loading for Show ---
Successfully loaded data\shows_data.csv
Initial DataFrame info for Show:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 135 entries, 0 to 134
Data columns (total 21 columns):
 #   Column           Non-Null Count  Dtype
---  ------           --------------  -----
 0   title            135 non-null    object
 1   tvmaze_id        135 non-null    int64
 2   genres           133 non-null    object
 3   summary          135 non-null    object
 4   runtime          56 non-null     float64
 5   average_runtime  134 non-null    float64
 6   premiered        135 non-null    object
 7   language         134 non-null    object
 8   status           135 non-null    object
 9   network_country  135 non-null    object
 10  rating_avg       128 non-null    float64
 11  rating_count     0 non-null      float64
 12  popularity       135 non-null    int64
 13  show_type        135 non-null    object
 14  cast             126 non-null    object
 15  characters       126 non-null    object
 16  crew             116 non-null    object
 17  episode_count    135 non-null    int64
 18  my_rating        135 non-null    float64
 19  watch_count      134 non-null    float64
 20  year_watched     134 non-null    float64
dtypes: float64(7), int64(3), object(11)
memory usage: 22.3+ KB

Initial DataFrame head for Show:
                 title  tvmaze_id                genres  ... my_rating  watch_count  year_watched
0  The Big Bang Theory         66                Comedy  ...       2.0          2.0        2020.0
1   Brooklyn Nine-Nine         49   Comedy|Action|Crime  ...       4.0          2.0        2020.0
2               Gotham         11    Drama|Action|Crime  ...       3.0          1.0        2020.0
3        Young Sheldon      26020         Comedy|Family  ...       2.5          1.0        2020.0
4             The Boys      15299  Action|Fantasy|Adult  ...       4.0          1.0        2020.0

[5 rows x 21 columns]
Columns renamed: {'tvmaze_id': 'id', 'title': 'title', 'summary': 'description', 'genres': 'genres', 'my_rating': 'my_rating', 'premiered': 'release_date'}
Converted 'release_date' to datetime and extracted 'release_year'.
Imputed missing values in 'runtime' (from original 'runtime') with median: 30.0
Imputed missing values in 'average_runtime' (from original 'average_runtime') with median: 39.5 
Imputed missing values in 'rating_avg' (from original 'rating_avg') with median: 7.7
Imputed missing values in 'watch_count' (from original 'watch_count') with median: 1.0
Filled missing values in 'genres' (from original 'genres') with 'Unknown'.
Filled missing values in 'network_country' (from original 'network_country') with 'Unknown'.    
Filled missing values in 'show_type' (from original 'show_type') with 'Unknown'.
Filled missing values in 'crew' (from original 'crew') with 'Unknown'.
Filled missing values in 'language' (from original 'language') with 'Unknown'.
Filled missing values in 'description' (from original 'summary') with 'Unknown'.
Filled missing values in 'status' (from original 'status') with 'Unknown'.
Filled missing values in 'characters' (from original 'characters') with 'Unknown'.
Filled missing values in 'cast' (from original 'cast') with 'Unknown'.
Filled missing values in 'title' (from original 'title') with 'Unknown'.
Created 'like_dislike' target based on 'my_rating' >= 4.0.

DataFrame info after cleaning for Show:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 135 entries, 0 to 134
Data columns (total 23 columns):
 #   Column           Non-Null Count  Dtype
---  ------           --------------  -----
 0   title            135 non-null    object
 1   id               135 non-null    int64
 2   genres           135 non-null    object
 3   description      135 non-null    object
 4   runtime          135 non-null    float64
 5   average_runtime  135 non-null    float64
 6   release_date     135 non-null    datetime64[ns]
 7   language         135 non-null    object
 8   status           135 non-null    object
 9   network_country  135 non-null    object
 10  rating_avg       135 non-null    float64
 11  rating_count     0 non-null      float64
 12  popularity       135 non-null    int64
 13  show_type        135 non-null    object
 14  cast             135 non-null    object
 15  characters       135 non-null    object
 16  crew             135 non-null    object
 17  episode_count    135 non-null    int64
 18  my_rating        135 non-null    float64
 19  watch_count      135 non-null    float64
 20  year_watched     134 non-null    float64
 21  release_year     135 non-null    int32
 22  like_dislike     135 non-null    int64
dtypes: datetime64[ns](1), float64(7), int32(1), int64(4), object(10)
memory usage: 23.9+ KB

DataFrame head after cleaning for Show:
                 title     id                genres  ... year_watched  release_year  like_dislike
0  The Big Bang Theory     66                Comedy  ...       2020.0          2007             
0
1   Brooklyn Nine-Nine     49   Comedy|Action|Crime  ...       2020.0          2013             
1
2               Gotham     11    Drama|Action|Crime  ...       2020.0          2014             
0
3        Young Sheldon  26020         Comedy|Family  ...       2020.0          2017             
0
4             The Boys  15299  Action|Fantasy|Adult  ...       2020.0          2019             
1

[5 rows x 23 columns]

Show rating distribution:
my_rating
3.0    36
4.0    32
4.5    15
5.0    15
1.0    13
2.0    10
3.5     8
2.5     6
Name: count, dtype: int64
Show like/dislike distribution:
like_dislike
0    73
1    62
Name: count, dtype: int64
Data split: Train samples = 108, Test samples = 27
Using device: cuda
--- Fitting FeatureExtractor for Show ---
Numerical features to fit: ['runtime', 'average_runtime', 'rating_avg', 'popularity', 'watch_count', 'episode_count']
Categorical features to fit: ['language', 'status', 'show_type', 'network_country']
Fitting ColumnTransformer...
ColumnTransformer fitted.
Loading text model: sentence-transformers/all-MiniLM-L6-v2
Loading image model: google/vit-base-patch16-224-in21k
Fitting PCA for text features...
Batches: 100%|███████████████████████████████████████████████████| 4/4 [00:00<00:00, 16.19it/s]
Text PCA fitted with 50 components.
FeatureExtractor fitting complete.
Transforming training data...
--- Transforming data using FeatureExtractor ---
ColumnTransformer output shape (on cuda): torch.Size([108, 20])
Batches: 100%|███████████████████████████████████████████████████| 4/4 [00:00<00:00, 17.15it/s]
Text embeddings shape (on cuda): torch.Size([108, 50])
Combined features shape (on cuda): torch.Size([108, 70])
Transforming test data...
--- Transforming data using FeatureExtractor ---
ColumnTransformer output shape (on cuda): torch.Size([27, 20])
Batches: 100%|███████████████████████████████████████████████████| 1/1 [00:00<00:00, 90.78it/s] 
Text embeddings shape (on cuda): torch.Size([27, 50])
Combined features shape (on cuda): torch.Size([27, 70])
Found existing best parameters for Show. Loading them.
Loaded parameters: {'n_estimators': 1276, 'learning_rate': 0.12762042288098602, 'max_depth': 7, 'subsample': 0.6950773470485563, 'colsample_bytree': 0.9561077735415868}
Training XGBoost Regressor model with best parameters...
XGBoost model training complete.

--- Evaluating Model ---
Mean Absolute Error (MAE): 0.8233
Root Mean Squared Error (RMSE): 0.9889
R-squared (R2): 0.3766

--- Saving trained model and feature extractor to E:\Personal_Media_Intelligence_Hub\src\..\models\show ---

Ensured directory exists: E:\Personal_Media_Intelligence_Hub\src\..\models\show
Ensured directory exists: E:\Personal_Media_Intelligence_Hub\src\..\diagnostics\show
Ensured directory exists: E:\Personal_Media_Intelligence_Hub\src\..\models\show\feature_extractor
Saving FeatureExtractor components to E:\Personal_Media_Intelligence_Hub\src\..\models\show\feature_extractor...
FeatureExtractor components saved.
Saved feature importance plot to E:\Personal_Media_Intelligence_Hub\src\..\diagnostics\show\Show_feature_importance.png
Training process complete for Show

Successfully trained model for Show.


================================================================================

--- Starting Model Training for Movie ---

--- Starting data loading for Movie ---
Successfully loaded data\movies_data.csv
Initial DataFrame info for Movie:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 368 entries, 0 to 367
Data columns (total 28 columns):
 #   Column                  Non-Null Count  Dtype
---  ------                  --------------  -----
 0   imdb_id                 368 non-null    object
 1   title                   366 non-null    object
 2   year                    366 non-null    float64
 3   rated                   357 non-null    object
 4   released                366 non-null    object
 5   runtime                 362 non-null    object
 6   genre                   364 non-null    object
 7   director                359 non-null    object
 8   writer                  358 non-null    object
 9   actors                  364 non-null    object
 10  parsed_cast             364 non-null    object
 11  parsed_crew             360 non-null    object
 12  plot                    360 non-null    object
 13  language                364 non-null    object
 14  country                 364 non-null    object
 15  awards                  350 non-null    object
 16  poster                  361 non-null    object
 17  my_rating               368 non-null    float64
 18  imdb_rating             361 non-null    float64
 19  imdb_votes              362 non-null    object
 20  metascore               355 non-null    float64
 21  rotten_tomatoes_rating  352 non-null    object
 22  type                    366 non-null    object
 23  dvd_release             4 non-null      object
 24  box_office              352 non-null    object
 25  production              2 non-null      object
 26  website                 0 non-null      float64
 27  letterboxd_name         368 non-null    object
dtypes: float64(5), object(23)
memory usage: 80.6+ KB

Initial DataFrame head for Movie:
      imdb_id           title    year  rated  ...    box_office production website letterboxd_name
0  tt15239678  Dune: Part Two  2024.0  PG-13  ...  $282,144,358        NaN     NaN  Dune: Part Two
1   tt1160419  Dune: Part One  2021.0  PG-13  ...  $108,897,830        NaN     NaN            Dune
2  tt15398776     Oppenheimer  2023.0      R  ...  $330,078,895        NaN     NaN     Oppenheimer
3   tt1517268          Barbie  2023.0  PG-13  ...  $636,238,421        NaN     NaN          Barbie
4   tt0137523      Fight Club  1999.0      R  ...   $37,030,102        NaN     NaN      Fight Club

[5 rows x 28 columns]
Columns renamed: {'imdb_id': 'id', 'title': 'title', 'plot': 'description', 'genre': 'genres', 'poster': 'image_url', 'my_rating': 'my_rating', 'released': 'release_date'}
Converted 'release_date' to datetime and extracted 'release_year'.
Imputed missing values in 'year' (from original 'year') with median: 2008.0
Imputed missing values in 'imdb_rating' (from original 'imdb_rating') with median: 7.4
Imputed missing values in 'metascore' (from original 'metascore') with median: 69.0
Filled missing values in 'director' (from original 'director') with 'Unknown'.
Filled missing values in 'genres' (from original 'genre') with 'Unknown'.
Filled missing values in 'actors' (from original 'actors') with 'Unknown'.
Filled missing values in 'rated' (from original 'rated') with 'Unknown'.
Filled missing values in 'language' (from original 'language') with 'Unknown'.
Filled missing values in 'writer' (from original 'writer') with 'Unknown'.
Filled missing values in 'description' (from original 'plot') with 'Unknown'.
Filled missing values in 'title' (from original 'title') with 'Unknown'.
Filled missing values in 'awards' (from original 'awards') with 'Unknown'.
Created 'like_dislike' target based on 'my_rating' >= 4.0.

DataFrame info after cleaning for Movie:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 368 entries, 0 to 367
Data columns (total 30 columns):
 #   Column                  Non-Null Count  Dtype
---  ------                  --------------  -----
 0   id                      368 non-null    object
 1   title                   368 non-null    object
 2   year                    368 non-null    float64
 3   rated                   368 non-null    object
 4   release_date            366 non-null    datetime64[ns]
 5   runtime                 362 non-null    object
 6   genres                  368 non-null    object
 7   director                368 non-null    object
 8   writer                  368 non-null    object
 9   actors                  368 non-null    object
 10  parsed_cast             364 non-null    object
 11  parsed_crew             360 non-null    object
 12  description             368 non-null    object
 13  language                368 non-null    object
 14  country                 364 non-null    object
 15  awards                  368 non-null    object
 16  image_url               361 non-null    object
 17  my_rating               368 non-null    float64
 18  imdb_rating             368 non-null    float64
 19  imdb_votes              362 non-null    object
 20  metascore               368 non-null    float64
 21  rotten_tomatoes_rating  352 non-null    object
 22  type                    366 non-null    object
 23  dvd_release             4 non-null      object
 24  box_office              352 non-null    object
 25  production              2 non-null      object
 26  website                 0 non-null      float64
 27  letterboxd_name         368 non-null    object
 28  release_year            366 non-null    float64
 29  like_dislike            368 non-null    int64
dtypes: datetime64[ns](1), float64(6), int64(1), object(22)
memory usage: 86.4+ KB

DataFrame head after cleaning for Movie:
           id           title    year  ... letterboxd_name release_year like_dislike
0  tt15239678  Dune: Part Two  2024.0  ...  Dune: Part Two       2024.0            1
1   tt1160419  Dune: Part One  2021.0  ...            Dune       2021.0            1
2  tt15398776     Oppenheimer  2023.0  ...     Oppenheimer       2023.0            1
3   tt1517268          Barbie  2023.0  ...          Barbie       2023.0            0
4   tt0137523      Fight Club  1999.0  ...      Fight Club       1999.0            1

[5 rows x 30 columns]

Show rating distribution:
my_rating
4.0    152
3.0    128
5.0     38
2.0     34
1.0     10
3.5      3
2.5      3
Name: count, dtype: int64
Show like/dislike distribution:
like_dislike
1    190
0    178
Name: count, dtype: int64
Data split: Train samples = 294, Test samples = 74
Using device: cuda
--- Fitting FeatureExtractor for Movie ---
Numerical features to fit: ['year', 'imdb_rating', 'metascore']
Categorical features to fit: ['rated', 'language', 'director', 'writer']
Fitting ColumnTransformer...
ColumnTransformer fitted.
Loading text model: sentence-transformers/all-MiniLM-L6-v2
Loading image model: google/vit-base-patch16-224-in21k
Fitting PCA for text features...
Batches: 100%|█████████████████████████████████████████████████| 10/10 [00:00<00:00, 32.03it/s] 
Text PCA fitted with 50 components.
Fitting PCA for image features...
Extracting image features: 100%|█████████████████████████████| 294/294 [00:44<00:00,  6.61it/s] 
Image PCA fitted with 50 components.
FeatureExtractor fitting complete.
Transforming training data...
--- Transforming data using FeatureExtractor ---
ColumnTransformer output shape (on cuda): torch.Size([294, 562])
Batches: 100%|█████████████████████████████████████████████████| 10/10 [00:00<00:00, 59.90it/s] 
Text embeddings shape (on cuda): torch.Size([294, 50])
Extracting image features: 100%|█████████████████████████████| 294/294 [00:37<00:00,  7.85it/s] 
Image embeddings shape (on cuda): torch.Size([294, 50])
Combined features shape (on cuda): torch.Size([294, 662])
Transforming test data...
--- Transforming data using FeatureExtractor ---
ColumnTransformer output shape (on cuda): torch.Size([74, 562])
Batches: 100%|███████████████████████████████████████████████████| 3/3 [00:00<00:00, 49.17it/s]
Text embeddings shape (on cuda): torch.Size([74, 50])
Extracting image features:  32%|██████████                     | 24/74 [00:03<00:07,  7.13it/s]Image download failed from https://m.media-amazon.com/images/M/MV5BM2UzYjk5MTQtY2U3NC00ODlmLTg2ZGYtMDc1N2Q5YTc0OWViXkEyXkFqcGdeQXVyMjMyMjA0NTA@._V1_SX300.jpg: 404 Client Error: Not Found for url: https://m.media-amazon.com/images/M/MV5BM2UzYjk5MTQtY2U3NC00ODlmLTg2ZGYtMDc1N2Q5YTc0OWViXkEyXkFqcGdeQXVyMjMyMjA0NTA@._V1_SX300.jpg
Extracting image features: 100%|███████████████████████████████| 74/74 [00:09<00:00,  7.53it/s] 
Image embeddings shape (on cuda): torch.Size([74, 50])
Combined features shape (on cuda): torch.Size([74, 662])
Found existing best parameters for Movie. Loading them.
Loaded parameters: {'n_estimators': 1086, 'learning_rate': 0.07177300891049822, 'max_depth': 6, 'subsample': 0.8700149548163899, 'colsample_bytree': 0.90091517023723}
Training XGBoost Regressor model with best parameters...
XGBoost model training complete.

--- Evaluating Model ---
Mean Absolute Error (MAE): 0.5395
Root Mean Squared Error (RMSE): 0.6868
R-squared (R2): 0.4226

--- Saving trained model and feature extractor to E:\Personal_Media_Intelligence_Hub\src\..\models\movie ---

Ensured directory exists: E:\Personal_Media_Intelligence_Hub\src\..\models\movie
Ensured directory exists: E:\Personal_Media_Intelligence_Hub\src\..\diagnostics\movie
Ensured directory exists: E:\Personal_Media_Intelligence_Hub\src\..\models\movie\feature_extractor
Saving FeatureExtractor components to E:\Personal_Media_Intelligence_Hub\src\..\models\movie\feature_extractor...
FeatureExtractor components saved.
Saved feature importance plot to E:\Personal_Media_Intelligence_Hub\src\..\diagnostics\movie\Movie_feature_importance.png
Training process complete for Movie

Successfully trained model for Movie.


================================================================================

--- Starting Model Training for Book ---

--- Starting data loading for Book ---
Successfully loaded data\books_data.csv
Initial DataFrame info for Book:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 59 entries, 0 to 58
Data columns (total 17 columns):
 #   Column               Non-Null Count  Dtype
---  ------               --------------  -----
 0   title                59 non-null     object
 1   my_rating            59 non-null     object
 2   authors              59 non-null     object
 3   publisher            51 non-null     object
 4   publishedDate        59 non-null     object
 5   pageCount            56 non-null     float64
 6   categories           56 non-null     object
 7   averageRating        26 non-null     float64
 8   ratingsCount         26 non-null     float64
 9   language             59 non-null     object
 10  description          55 non-null     object
 11  thumbnail            54 non-null     object
 12  previewLink          59 non-null     object
 13  infoLink             59 non-null     object
 14  retailPriceAmount    4 non-null      float64
 15  retailPriceCurrency  4 non-null      object
 16  accessViewStatus     59 non-null     object
dtypes: float64(4), object(13)
memory usage: 8.0+ KB

Initial DataFrame head for Book:
                                    title my_rating  ... retailPriceCurrency accessViewStatus   
0  Diary of a Wimpy Kid 3 : The Last Stra       2.5  ...                 NaN             NONE   
1                          The Ugly Truth         3  ...                 NaN             NONE   
2                                Dog Days         3  ...                 NaN             NONE   
3                               Hard Luck       2.5  ...                 NaN             NONE   
4                           Rodrick Rules         3  ...                 NaN             NONE   

[5 rows x 17 columns]
Columns renamed: {'title': 'title', 'description': 'description', 'categories': 'genres', 'thumbnail': 'image_url', 'my_rating': 'my_rating', 'publishedDate': 'release_date'}
Converted 'release_date' to datetime and extracted 'release_year'.
Imputed missing values in 'averageRating' (from original 'averageRating') with median: 4.5      
Imputed missing values in 'ratingsCount' (from original 'ratingsCount') with median: 2.0        
Imputed missing values in 'pageCount' (from original 'pageCount') with median: 202.0
Filled missing values in 'description' (from original 'description') with 'Unknown'.
Filled missing values in 'language' (from original 'language') with 'Unknown'.
Filled missing values in 'publisher' (from original 'publisher') with 'Unknown'.
Filled missing values in 'genres' (from original 'categories') with 'Unknown'.
Filled missing values in 'authors' (from original 'authors') with 'Unknown'.
Filled missing values in 'title' (from original 'title') with 'Unknown'.
Dropped 2 rows due to missing 'my_rating'.
Created 'like_dislike' target based on 'my_rating' >= 4.0.

DataFrame info after cleaning for Book:
<class 'pandas.core.frame.DataFrame'>
Index: 57 entries, 0 to 58
Data columns (total 19 columns):
 #   Column               Non-Null Count  Dtype
---  ------               --------------  -----
 0   title                57 non-null     object
 1   my_rating            57 non-null     float64
 2   authors              57 non-null     object
 3   publisher            57 non-null     object
 4   release_date         25 non-null     datetime64[ns]
 5   pageCount            57 non-null     float64
 6   genres               57 non-null     object
 7   averageRating        57 non-null     float64
 8   ratingsCount         57 non-null     float64
 9   language             57 non-null     object
 10  description          57 non-null     object
 11  image_url            53 non-null     object
 12  previewLink          57 non-null     object
 13  infoLink             57 non-null     object
 14  retailPriceAmount    3 non-null      float64
 15  retailPriceCurrency  3 non-null      object
 16  accessViewStatus     57 non-null     object
 17  release_year         25 non-null     float64
 18  like_dislike         57 non-null     int64
dtypes: datetime64[ns](1), float64(6), int64(1), object(11)
memory usage: 8.9+ KB

DataFrame head after cleaning for Book:
                                    title  my_rating  ... release_year like_dislike
0  Diary of a Wimpy Kid 3 : The Last Stra        2.5  ...       2009.0            0
1                          The Ugly Truth        3.0  ...          NaN            0
2                                Dog Days        3.0  ...          NaN            0
3                               Hard Luck        2.5  ...          NaN            0
4                           Rodrick Rules        3.0  ...       2009.0            0

[5 rows x 19 columns]

Show rating distribution:
my_rating
3.0    19
3.5    13
4.0     9
2.5     4
4.5     4
5.0     4
2.0     3
1.0     1
Name: count, dtype: int64
Show like/dislike distribution:
like_dislike
0    40
1    17
Name: count, dtype: int64
Data split: Train samples = 45, Test samples = 12
Using device: cuda
--- Fitting FeatureExtractor for Book ---
Numerical features to fit: ['averageRating', 'ratingsCount', 'pageCount']
Categorical features to fit: ['language', 'authors', 'publisher']
Fitting ColumnTransformer...
ColumnTransformer fitted.
Loading text model: sentence-transformers/all-MiniLM-L6-v2
Loading image model: google/vit-base-patch16-224-in21k
Fitting PCA for text features...
Batches: 100%|███████████████████████████████████████████████████| 2/2 [00:00<00:00,  8.96it/s] 
Text PCA fitted with 44 components.
Fitting PCA for image features...
Extracting image features: 100%|███████████████████████████████| 45/45 [00:16<00:00,  2.80it/s] 
Image PCA fitted with 44 components.
FeatureExtractor fitting complete.
Transforming training data...
--- Transforming data using FeatureExtractor ---
ColumnTransformer output shape (on cuda): torch.Size([45, 35])
Batches: 100%|███████████████████████████████████████████████████| 2/2 [00:00<00:00,  8.55it/s] 
Text embeddings shape (on cuda): torch.Size([45, 44])
Extracting image features: 100%|███████████████████████████████| 45/45 [00:14<00:00,  3.01it/s] 
Image embeddings shape (on cuda): torch.Size([45, 44])
Combined features shape (on cuda): torch.Size([45, 123])
Transforming test data...
--- Transforming data using FeatureExtractor ---
ColumnTransformer output shape (on cuda): torch.Size([12, 35])
Batches: 100%|███████████████████████████████████████████████████| 1/1 [00:00<00:00, 58.82it/s]
Text embeddings shape (on cuda): torch.Size([12, 44])
Extracting image features: 100%|███████████████████████████████| 12/12 [00:04<00:00,  2.59it/s] 
Image embeddings shape (on cuda): torch.Size([12, 44])
Combined features shape (on cuda): torch.Size([12, 123])
Found existing best parameters for Book. Loading them.
Loaded parameters: {'n_estimators': 1363, 'learning_rate': 0.06341059518970044, 'max_depth': 6, 'subsample': 0.8451606460071381, 'colsample_bytree': 0.7520154915307046}
Training XGBoost Regressor model with best parameters...
XGBoost model training complete.

--- Evaluating Model ---
Mean Absolute Error (MAE): 0.6390
Root Mean Squared Error (RMSE): 0.8018
R-squared (R2): -0.8517

--- Saving trained model and feature extractor to E:\Personal_Media_Intelligence_Hub\src\..\models\book ---

Ensured directory exists: E:\Personal_Media_Intelligence_Hub\src\..\models\book
Ensured directory exists: E:\Personal_Media_Intelligence_Hub\src\..\diagnostics\book
Ensured directory exists: E:\Personal_Media_Intelligence_Hub\src\..\models\book\feature_extractor
Saving FeatureExtractor components to E:\Personal_Media_Intelligence_Hub\src\..\models\book\feature_extractor...
FeatureExtractor components saved.
Saved feature importance plot to E:\Personal_Media_Intelligence_Hub\src\..\diagnostics\book\Book_feature_importance.png
Training process complete for Book

Successfully trained model for Book.


================================================================================

--- Starting Model Training for Music ---

--- Starting data loading for Music ---
Successfully loaded data\spotify_all_unique_tracks_combined.csv
Successfully loaded data\spotify_saved_albums.csv
Successfully loaded data\spotify_top_tracks.csv
Initial DataFrame info for Music:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 12709 entries, 0 to 12708
Data columns (total 15 columns):
 #   Column            Non-Null Count  Dtype
---  ------            --------------  -----
 0   Track Name        12607 non-null  object
 1   Artist(s)         12708 non-null  object
 2   Album Name        12708 non-null  object
 3   Playlist Name(s)  2669 non-null   object
 4   Genre(s)          7588 non-null   object
 5   Release Date      12708 non-null  object
 6   Popularity        12708 non-null  float64
 7   Track ID          12607 non-null  object
 8   Track URL         12607 non-null  object
 9   Added At          2771 non-null   object
 10  Album Type        102 non-null    object
 11  Total Tracks      102 non-null    float64
 12  Album ID          102 non-null    object
 13  Album URL         102 non-null    object
 14  Time Range        9938 non-null   object
dtypes: float64(2), object(13)
memory usage: 1.5+ MB

Initial DataFrame head for Music:
                    Track Name                       Artist(s)  ... Album URL Time Range
0                 Ace Trumpets         Clipse, Pusha T, Malice  ...       NaN        NaN        
1     WASSUP (feat. JPEGMAFIA)  Joey Valence & Brae, JPEGMAFIA  ...       NaN        NaN        
2                 The Contract               Twenty One Pilots  ...       NaN        NaN        
3  Video Killed The Radio Star                     The Buggles  ...       NaN        NaN        
4                Dark Thoughts                       Lil Tecca  ...       NaN        NaN        

[5 rows x 15 columns]
Columns renamed: {'Track ID': 'id', 'Track Name': 'title', 'Album Name': 'description', 'Genre(s)': 'genres', 'Popularity': 'my_rating', 'Release Date': 'release_date'}
Converted 'release_date' to datetime and extracted 'release_year'.
Imputed missing values in 'my_rating' (from original 'Popularity') with median: 62.0
Filled missing values in 'Artist(s)' (from original 'Artist(s)') with 'Unknown'.
Filled missing values in 'genres' (from original 'Genre(s)') with 'Unknown'.
Filled missing values in 'title' (from original 'Track Name') with 'Unknown'.
Filled missing values in 'description' (from original 'Album Name') with 'Unknown'.
Warning: 'Popularity' column not found for Music. Cannot derive 'my_rating'.
Created 'like_dislike' target based on 'my_rating' >= 3.0.

DataFrame info after cleaning for Music:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 12709 entries, 0 to 12708
Data columns (total 17 columns):
 #   Column            Non-Null Count  Dtype
---  ------            --------------  -----
 0   title             12709 non-null  object
 1   Artist(s)         12709 non-null  object
 2   description       12709 non-null  object
 3   Playlist Name(s)  2669 non-null   object
 4   genres            12709 non-null  object
 5   release_date      12423 non-null  datetime64[ns]
 6   my_rating         12709 non-null  float64
 7   id                12607 non-null  object
 8   Track URL         12607 non-null  object
 9   Added At          2771 non-null   object
 10  Album Type        102 non-null    object
 11  Total Tracks      102 non-null    float64
 12  Album ID          102 non-null    object
 13  Album URL         102 non-null    object
 14  Time Range        9938 non-null   object
 15  release_year      12423 non-null  float64
 16  like_dislike      12709 non-null  int64
dtypes: datetime64[ns](1), float64(3), int64(1), object(12)
memory usage: 1.6+ MB

DataFrame head after cleaning for Music:
                         title                       Artist(s)  ... release_year like_dislike   
0                 Ace Trumpets         Clipse, Pusha T, Malice  ...       2025.0            1   
1     WASSUP (feat. JPEGMAFIA)  Joey Valence & Brae, JPEGMAFIA  ...       2025.0            1   
2                 The Contract               Twenty One Pilots  ...       2025.0            1   
3  Video Killed The Radio Star                     The Buggles  ...       1980.0            1   
4                Dark Thoughts                       Lil Tecca  ...       2025.0            1   

[5 rows x 17 columns]

Show rating distribution:
my_rating
66.0    363
61.0    317
64.0    316
60.0    314
65.0    314
       ...
7.0      12
94.0     11
9.0       9
13.0      7
98.0      2
Name: count, Length: 96, dtype: int64
Show like/dislike distribution:
like_dislike
1    12433
0      276
Name: count, dtype: int64
Data split: Train samples = 10167, Test samples = 2542
Using device: cuda
--- Fitting FeatureExtractor for Music ---
Categorical features to fit: ['Artist(s)']
Fitting ColumnTransformer...
ColumnTransformer fitted.
Loading text model: sentence-transformers/all-MiniLM-L6-v2
Loading image model: google/vit-base-patch16-224-in21k
FeatureExtractor fitting complete.
Transforming training data...
--- Transforming data using FeatureExtractor ---
ColumnTransformer output shape (on cuda): torch.Size([10167, 2093])
Combined features shape (on cuda): torch.Size([10167, 2093])
Transforming test data...
--- Transforming data using FeatureExtractor ---
ColumnTransformer output shape (on cuda): torch.Size([2542, 2093])
Combined features shape (on cuda): torch.Size([2542, 2093])
Found existing best parameters for Music. Loading them.
Loaded parameters: {'n_estimators': 1609, 'learning_rate': 0.28681832270169016, 'max_depth': 9, 'subsample': 0.9998151396313091, 'colsample_bytree': 0.8098871865123071}
Training XGBoost Regressor model with best parameters...
XGBoost model training complete.

--- Evaluating Model ---
Mean Absolute Error (MAE): 9.1268
Root Mean Squared Error (RMSE): 13.9959
R-squared (R2): 0.4395

--- Saving trained model and feature extractor to E:\Personal_Media_Intelligence_Hub\src\..\models\music ---

Ensured directory exists: E:\Personal_Media_Intelligence_Hub\src\..\models\music
Ensured directory exists: E:\Personal_Media_Intelligence_Hub\src\..\diagnostics\music
Ensured directory exists: E:\Personal_Media_Intelligence_Hub\src\..\models\music\feature_extractor
Saving FeatureExtractor components to E:\Personal_Media_Intelligence_Hub\src\..\models\music\feature_extractor...
FeatureExtractor components saved.
Saved feature importance plot to E:\Personal_Media_Intelligence_Hub\src\..\diagnostics\music\Music_feature_importance.png
Training process complete for Music

Successfully trained model for Music.


================================================================================









Show model isnt working 
--- New Prediction ---
1️⃣ Select a Content Type:
   1. Game
   2. Show
   3. Movie
   4. Music
   5. Book
Enter the number of your choice: 2

2️⃣ Enter the name of the show to search for: witcher
Loading FeatureExtractor components from E:\Personal_Media_Intelligence_Hub\src\..\models\show\feature_extractor...
Using device: cuda
FeatureExtractor components loaded successfully.
✅ Successfully loaded model and extractor for Show.

Searching for 'witcher'...
Searching TVmaze for: witcher

3️⃣ Select the correct item from the search results:
   1. The Witcher (2019)
   2. The Witcher: Blood Origin (2022)
   3. The Witcher Anime Specials (2021)
   4. The Witcher: A Look Inside the Episodes (2020)
   5. Wiedźmin (2002)
   6. Hitched or Ditched (2009)
   7. Watcher (2019)
   8. The Watcher (2022)
   9. Twitches (2005)
   10. Witches (2020)

Enter the number of the content you want to predict: 1

Fetching details for 'The Witcher (2019)'...
Fetching details for show ID: 28276

Gathering features for prediction...
⚙️  Running prediction...
--- Transforming data using FeatureExtractor ---
ColumnTransformer output shape (on cuda): torch.Size([1, 20])
Batches: 100%|███████████████████████████████████████████████████| 1/1 [00:00<00:00, 50.02it/s] 
Text embeddings shape (on cuda): torch.Size([1, 50])
Combined features shape (on cuda): torch.Size([1, 70])

===================================
        ⭐ PREDICTION RESULT ⭐
===================================
  Content: The Witcher (2019)
  Predicted Rating: 1.79 / 5.0
===================================


--- New Prediction ---
1️⃣ Select a Content Type:
   1. Game
   2. Show
   3. Movie
   4. Music
   5. Book
Enter the number of your choice: breaking bad 
Invalid input. Please enter a number.
Enter the number of your choice: 2

2️⃣ Enter the name of the show to search for: breaking bad
Loading FeatureExtractor components from E:\Personal_Media_Intelligence_Hub\src\..\models\show\feature_extractor...
Using device: cuda
FeatureExtractor components loaded successfully.
✅ Successfully loaded model and extractor for Show.

Searching for 'breaking bad'...
Searching TVmaze for: breaking bad

3️⃣ Select the correct item from the search results:
   1. Breaking Bad (2008)
   2. Breaking Bad: Original Minisodes (2009)
   3. Talking Bad (2013)
   4. Breaking Band (2016)
   5. Breaking the Band (2018)
   6. Bradley Walsh & Son: Breaking Dad (2019)
   7. Breaking Dad: Britain's Unlikeliest Drug Dealer (2024)
   8. Baking Mad with Eric Lanlard (2011)

Enter the number of the content you want to predict: 1

Fetching details for 'Breaking Bad (2008)'...
Fetching details for show ID: 169

Gathering features for prediction...
⚙️  Running prediction...
--- Transforming data using FeatureExtractor ---
ColumnTransformer output shape (on cuda): torch.Size([1, 20])
Batches: 100%|██████████████████████████████████████████████████| 1/1 [00:00<00:00, 139.99it/s] 
Text embeddings shape (on cuda): torch.Size([1, 50])
Combined features shape (on cuda): torch.Size([1, 70])

===================================
        ⭐ PREDICTION RESULT ⭐
===================================
  Content: Breaking Bad (2008)
  Predicted Rating: 1.78 / 5.0
===================================


--- New Prediction ---
1️⃣ Select a Content Type:
   1. Game
   2. Show
   3. Movie
   4. Music
   5. Book
Enter the number of your choice: 2

2️⃣ Enter the name of the show to search for: community
Loading FeatureExtractor components from E:\Personal_Media_Intelligence_Hub\src\..\models\show\feature_extractor...
Using device: cuda
FeatureExtractor components loaded successfully.
✅ Successfully loaded model and extractor for Show.

Searching for 'community'...
Searching TVmaze for: community

3️⃣ Select the correct item from the search results:
   1. Community (2009)
   2. Community Life (2016)
   3. Community Life (2023)
   4. División Palermo (2023)
   5. Громада (2019)
   6. Diplomatic Immunity (2009)
   7. The Communist's Daughter (2021)
   8. Communion (2022)

Enter the number of the content you want to predict: 1

Fetching details for 'Community (2009)'...
Fetching details for show ID: 318

Gathering features for prediction...
⚙️  Running prediction...
--- Transforming data using FeatureExtractor ---
ColumnTransformer output shape (on cuda): torch.Size([1, 20])
Batches: 100%|███████████████████████████████████████████████████| 1/1 [00:00<00:00, 32.26it/s]
Text embeddings shape (on cuda): torch.Size([1, 50])
Combined features shape (on cuda): torch.Size([1, 70])

===================================
        ⭐ PREDICTION RESULT ⭐
===================================
  Content: Community (2009)
  Predicted Rating: 2.07 / 5.0
===================================


--- New Prediction ---
1️⃣ Select a Content Type:
   1. Game
   2. Show
   3. Movie
   4. Music
   5. Book
Enter the number of your choice: 2

2️⃣ Enter the name of the show to search for: bojack horseman
Loading FeatureExtractor components from E:\Personal_Media_Intelligence_Hub\src\..\models\show\feature_extractor...
Using device: cuda
FeatureExtractor components loaded successfully.
✅ Successfully loaded model and extractor for Show.

Searching for 'bojack horseman'...
Searching TVmaze for: bojack horseman

3️⃣ Select the correct item from the search results:
   1. BoJack Horseman (2014)

Enter the number of the content you want to predict: 1

Fetching details for 'BoJack Horseman (2014)'...
Fetching details for show ID: 184

Gathering features for prediction...
⚙️  Running prediction...
--- Transforming data using FeatureExtractor ---
ColumnTransformer output shape (on cuda): torch.Size([1, 20])
Batches: 100%|███████████████████████████████████████████████████| 1/1 [00:00<00:00, 66.58it/s]
Text embeddings shape (on cuda): torch.Size([1, 50])
Combined features shape (on cuda): torch.Size([1, 70])

===================================
        ⭐ PREDICTION RESULT ⭐
===================================
  Content: BoJack Horseman (2014)
  Predicted Rating: 2.29 / 5.0
===================================


--- New Prediction ---
1️⃣ Select a Content Type:
   1. Game
   2. Show
   3. Movie
   4. Music
   5. Book
Enter the number of your choice: 2

2️⃣ Enter the name of the show to search for: peaky blinders
Loading FeatureExtractor components from E:\Personal_Media_Intelligence_Hub\src\..\models\show\feature_extractor...
Using device: cuda
FeatureExtractor components loaded successfully.
✅ Successfully loaded model and extractor for Show.

Searching for 'peaky blinders'...
Searching TVmaze for: peaky blinders

3️⃣ Select the correct item from the search results:
   1. Peaky Blinders (2013)
   2. The Real Peaky Blinders (2022)

Enter the number of the content you want to predict: 1

Fetching details for 'Peaky Blinders (2013)'...
Fetching details for show ID: 269

Gathering features for prediction...
⚙️  Running prediction...
--- Transforming data using FeatureExtractor ---
ColumnTransformer output shape (on cuda): torch.Size([1, 20])
Batches: 100%|███████████████████████████████████████████████████| 1/1 [00:00<00:00, 38.38it/s]
Text embeddings shape (on cuda): torch.Size([1, 50])
Combined features shape (on cuda): torch.Size([1, 70])

===================================
        ⭐ PREDICTION RESULT ⭐
===================================
  Content: Peaky Blinders (2013)
  Predicted Rating: 1.73 / 5.0
===================================

everything has low preditction